package main

import "fmt"

type linkedList struct {
	headNode *Node
}
type Node struct {
	key      int
	nextNode *Node
}

func (l *linkedList) insert(key int) {
	node := Node{}
	node.key = key
	if node.nextNode != nil {
		node.nextNode = l.headNode
	}
	l.headNode = &node
}

func (l linkedList) iterate() {
	var node *Node
	for node = l.headNode; node != nil; node = node.nextNode {
		fmt.Println(node.key)
	}
}
func (l linkedList) lastNode() *Node {
	var node *Node
	var lastNode *Node
	for node = l.headNode; node != nil; node = node.nextNode {
		if node.nextNode == nil {
			lastNode = node
		}
	}
	return lastNode

}
func (l linkedList) addToEnd(key int) {
	node := &Node{}
	lastNode := l.lastNode()
	node.key = key

	if node.nextNode == nil {
		node = lastNode
		lastNode.nextNode = node
	}

}
func (l *linkedList) nodeValue(key int) *Node {
	var node *Node
	var nodeWith *Node
	for node = l.headNode; node != nil; node = node.nextNode {
		if node.key == key {
			nodeWith = node
		}
	}
	return nodeWith

}
func (l *linkedList) addAfter(key int, property int) {
	node := &Node{}
	nodeValue := l.nodeValue(property)
	node.key = key

	if node.nextNode != nil {
		node.nextNode = nodeValue.nextNode
		nodeValue.nextNode = node

	}
}

func main() {
	myLis := linkedList{}
	myLis.insert(8)
	myLis.addToEnd(9)
	myLis.addAfter(69, 8)
	myLis.iterate()
}
